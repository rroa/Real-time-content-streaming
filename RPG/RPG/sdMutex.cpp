//---------------------------------------------------------------------------//
//		   _____  ____  _      _____ _____  _    _  _____					 //
//		  / ____|/ __ \| |    |_   _|  __ \| |  | |/ ____|					 //
//		 | (___ | |  | | |      | | | |  | | |  | | (___  					 //
//		  \___ \| |  | | |      | | | |  | | |  | |\___ \ 					 //
//		  ____) | |__| | |____ _| |_| |__| | |__| |____) |					 //
//		 |_____/ \____/|______|_____|_____/ \____/|_____/ 					 //
//						Raúl Roa - Solidus Game Development Engine			 //
//																			 //
//---------------------------------------------------------------------------//
//                                                                           //
// Name : sdMutex.cpp		                                                 //
//                                                                           //
// Desc : Threading platform independent wrapper for mutual exclusion		 //
//        (MutEx) object representation										 //
//                                                                           //
//---------------------------------------------------------------------------//
//      Copyright (c) 2013 Raúl Roa. All Rights Reserved.					 //
//---------------------------------------------------------------------------//

//-----------------------------------------------------------------------------
// Pre-compiled Header
//-----------------------------------------------------------------------------
#include "stdafx.h"

//-----------------------------------------------------------------------------
// sdMutexLock Module Includes
//-----------------------------------------------------------------------------
#include "sdMutex.hpp"
#include "sdMutexLock.hpp"

namespace Solidus
{
	///////////////////////////////////////////////////////////////////////////////
	// sdMutex Functions
	///////////////////////////////////////////////////////////////////////////////
	//-----------------------------------------------------------------------------
	//  Name : sdMutex() (Constructor)
	/// <summary>
	/// Initializes the critical section
	/// </summary>
	//------------------------------------------------------------------------------
	sdMutex::sdMutex()
		: m_recurseCount( 0 )
	{ 
		InitializeCriticalSection ( &m_critSection ); 
	}
	
	//-----------------------------------------------------------------------------
	//  Name : sdMutex() (Destructor)
	/// <summary>
	/// Deletes the critical section
	/// </summary>
	//------------------------------------------------------------------------------
	sdMutex::~sdMutex() 
	{ 
		DeleteCriticalSection ( &m_critSection ); 
	}

	//-----------------------------------------------------------------------------
	//  Name : Acquire()
	/// <summary>
	/// Acquires the critical section
	/// </summary>
	//------------------------------------------------------------------------------
	void sdMutex::Acquire() 
	{ 
		EnterCriticalSection ( &m_critSection );
		m_recurseCount++;
	}

	//-----------------------------------------------------------------------------
	//  Name : Release()
	/// <summary>
	/// Releases the critical section
	/// </summary>
	//------------------------------------------------------------------------------
	void sdMutex::Release() 
	{ 
		LeaveCriticalSection ( &m_critSection );
		m_recurseCount--;
	}
}