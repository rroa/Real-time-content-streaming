#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec2 vertexPosition_screenspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec4 color;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
smooth out vec4 theColor;

void main()
{

	// Output position of the vertex, in clip space
	// map [0..800][0..600] to [-1..1][-1..1]
	vec2 vertexPosition_homoneneousspace = vertexPosition_screenspace - vec2( 640, 360 );
	vertexPosition_homoneneousspace /= vec2( 640,360 ); // TODO make this values uniforms
	gl_Position =  vec4( vertexPosition_homoneneousspace, 0, 1 );
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;

	theColor  = color ;
}