//---------------------------------------------------------------------------//
//		   _____  ____  _      _____ _____  _    _  _____					 //
//		  / ____|/ __ \| |    |_   _|  __ \| |  | |/ ____|					 //
//		 | (___ | |  | | |      | | | |  | | |  | | (___  					 //
//		  \___ \| |  | | |      | | | |  | | |  | |\___ \ 					 //
//		  ____) | |__| | |____ _| |_| |__| | |__| |____) |					 //
//		 |_____/ \____/|______|_____|_____/ \____/|_____/ 					 //
//						Raúl Roa - Solidus Game Development Engine			 //
//																			 //
//---------------------------------------------------------------------------//
//                                                                           //
// Name : sdMutexLock.cpp	                                                 //
//                                                                           //
// Desc : Threading platform independent wrapper for mutual exclusion		 //
//        object operations such as locking and unlocking					 //
//                                                                           //
//---------------------------------------------------------------------------//
//      Copyright (c) 2013 Raúl Roa. All Rights Reserved.					 //

//-----------------------------------------------------------------------------
// Pre-compiled Header
//-----------------------------------------------------------------------------
#include "stdafx.h"

//-----------------------------------------------------------------------------
// sdMutexLock Module Includes
//-----------------------------------------------------------------------------
#include "sdMutexLock.hpp"

namespace Solidus
{		
	//-----------------------------------------------------------------------------
	//  Name : sdMutexLock()
	/// <summary>
	/// Acquires the state of the semaphore
	/// </summary>
	//------------------------------------------------------------------------------
	sdMutexLock::sdMutexLock( sdMutex& mutex ) 
		: m_mutex( mutex ) 
	{
		m_mutex.Acquire();
	}
	
	//-----------------------------------------------------------------------------
	//  Name : ~sdMutexLock()
	/// <summary>
	/// Release the state of the semaphore
	/// </summary>
	//------------------------------------------------------------------------------
	sdMutexLock::~sdMutexLock ()
	{
		m_mutex.Release();
	}
}