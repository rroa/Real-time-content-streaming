//---------------------------------------------------------------------------//
//		   _____  ____  _      _____ _____  _    _  _____					 //
//		  / ____|/ __ \| |    |_   _|  __ \| |  | |/ ____|					 //
//		 | (___ | |  | | |      | | | |  | | |  | | (___  					 //
//		  \___ \| |  | | |      | | | |  | | |  | |\___ \ 					 //
//		  ____) | |__| | |____ _| |_| |__| | |__| |____) |					 //
//		 |_____/ \____/|______|_____|_____/ \____/|_____/ 					 //
//						Raúl Roa - Solidus Game Development Engine			 //
//																			 //
//---------------------------------------------------------------------------//
//                                                                           //
// Name : sdMutexLock.hpp	                                                 //
//                                                                           //
// Desc : Threading platform independent wrapper for mutual exclusion		 //
//        object operations such as locking and unlocking					 //
//                                                                           //
//---------------------------------------------------------------------------//
//      Copyright (c) 2013 Raúl Roa. All Rights Reserved.					 //
//---------------------------------------------------------------------------//

#pragma once
#if !defined( _SGE_SDMUTEXLOCK_H_ )

#define _SGE_SDMUTEXLOCK_H_

//-----------------------------------------------------------------------------
// sdStringUtility Header Includes
//-----------------------------------------------------------------------------
#include "sdMutex.hpp"

//-----------------------------------------------------------------------------
// Solidus Namespace
//-----------------------------------------------------------------------------
namespace Solidus
{	
	class sdMutexLock
	{
	public:
		/* =============================================================
		 * CTOR
		 * ============================================================= */

		sdMutexLock( sdMutex& mutex );
		sdMutexLock& operator=(const sdMutexLock &tmp)
		{
			if(&tmp == this)
			{
				// do nothing
			}
		}
		~sdMutexLock();
	private:
		/* =============================================================
		 * MEMBERS
		 * ============================================================= */

		sdMutex& m_mutex;
	};
}

#endif // !_SGE_SDMUTEXLOCK_H_